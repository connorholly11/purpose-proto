"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/client-layout.tsx":
/*!***********************************!*\
  !*** ./src/app/client-layout.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ClientLayout; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_AppHeader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/AppHeader */ \"(app-pages-browser)/./src/components/AppHeader.tsx\");\n/* harmony import */ var _components_NavBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/NavBar */ \"(app-pages-browser)/./src/components/NavBar.tsx\");\n/* harmony import */ var _components_FeedbackButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @components/FeedbackButton */ \"(app-pages-browser)/./src/components/FeedbackButton.tsx\");\n/* harmony import */ var _context_ChatContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../context/ChatContext */ \"(app-pages-browser)/./src/context/ChatContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction ClientLayout(param) {\n    let { children } = param;\n    _s();\n    const [isAdminMode, setIsAdminMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Effect to load admin mode from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // On mount, check local storage\n        const storedMode = localStorage.getItem(\"adminMode\");\n        if (storedMode) {\n            setIsAdminMode(storedMode === \"true\");\n        }\n    }, []);\n    // Handler function to update both state and localStorage\n    const handleSetAdminMode = (value)=>{\n        setIsAdminMode(value);\n        localStorage.setItem(\"adminMode\", String(value));\n    };\n    // Navigation items\n    const navItems = [\n        {\n            name: \"AI Companion\",\n            path: \"/ai-companion\",\n            icon: \"chat-bubble\"\n        },\n        {\n            name: \"Quests\",\n            path: \"/quests\",\n            icon: \"emoji-events\"\n        },\n        {\n            name: \"Profile\",\n            path: \"/profile\",\n            icon: \"person\"\n        },\n        {\n            name: \"Dashboard\",\n            path: \"/dashboard\",\n            icon: \"dashboard\",\n            adminOnly: true\n        },\n        {\n            name: \"System Prompts\",\n            path: \"/prompts\",\n            icon: \"settings\",\n            adminOnly: true\n        },\n        {\n            name: \"Admin Tools\",\n            path: \"/admin\",\n            icon: \"admin-panel-settings\",\n            adminOnly: true\n        },\n        {\n            name: \"Testing\",\n            path: \"/testing\",\n            icon: \"science\",\n            adminOnly: true\n        },\n        {\n            name: \"Evaluations\",\n            path: \"/eval\",\n            icon: \"score\",\n            adminOnly: true\n        }\n    ];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_ChatContext__WEBPACK_IMPORTED_MODULE_5__.ChatProvider, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AppHeader__WEBPACK_IMPORTED_MODULE_2__.AdminContext.Provider, {\n            value: {\n                isAdminMode,\n                setIsAdminMode: handleSetAdminMode\n            },\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AppHeader__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/app/client-layout.tsx\",\n                    lineNumber: 55,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                    className: \"main-content\",\n                    children: children\n                }, void 0, false, {\n                    fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/app/client-layout.tsx\",\n                    lineNumber: 56,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_NavBar__WEBPACK_IMPORTED_MODULE_3__.NavBar, {\n                    items: navItems,\n                    isAdminMode: isAdminMode\n                }, void 0, false, {\n                    fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/app/client-layout.tsx\",\n                    lineNumber: 59,\n                    columnNumber: 9\n                }, this),\n                isAdminMode && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_FeedbackButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/app/client-layout.tsx\",\n                    lineNumber: 60,\n                    columnNumber: 25\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/app/client-layout.tsx\",\n            lineNumber: 54,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/app/client-layout.tsx\",\n        lineNumber: 53,\n        columnNumber: 5\n    }, this);\n}\n_s(ClientLayout, \"FATiM5AU8SWV/T2Ybuvkah7KCY0=\");\n_c = ClientLayout;\nvar _c;\n$RefreshReg$(_c, \"ClientLayout\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY2xpZW50LWxheW91dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVtRDtBQUNFO0FBQ1A7QUFDRjtBQUNZO0FBQ0Y7QUFVdkMsU0FBU1EsYUFBYSxLQUlwQztRQUpvQyxFQUNuQ0MsUUFBUSxFQUdULEdBSm9DOztJQUtuQyxNQUFNLENBQUNDLGFBQWFDLGVBQWUsR0FBR1YsK0NBQVFBLENBQUM7SUFFL0MsdURBQXVEO0lBQ3ZEQyxnREFBU0EsQ0FBQztRQUNSLGdDQUFnQztRQUNoQyxNQUFNVSxhQUFhQyxhQUFhQyxPQUFPLENBQUM7UUFDeEMsSUFBSUYsWUFBWTtZQUNkRCxlQUFlQyxlQUFlO1FBQ2hDO0lBQ0YsR0FBRyxFQUFFO0lBRUwseURBQXlEO0lBQ3pELE1BQU1HLHFCQUFxQixDQUFDQztRQUMxQkwsZUFBZUs7UUFDZkgsYUFBYUksT0FBTyxDQUFDLGFBQWFDLE9BQU9GO0lBQzNDO0lBRUEsbUJBQW1CO0lBQ25CLE1BQU1HLFdBQXNCO1FBQzFCO1lBQUVDLE1BQU07WUFBZ0JDLE1BQU07WUFBaUJDLE1BQU07UUFBYztRQUNuRTtZQUFFRixNQUFNO1lBQVVDLE1BQU07WUFBV0MsTUFBTTtRQUFlO1FBQ3hEO1lBQUVGLE1BQU07WUFBV0MsTUFBTTtZQUFZQyxNQUFNO1FBQVM7UUFDcEQ7WUFBRUYsTUFBTTtZQUFhQyxNQUFNO1lBQWNDLE1BQU07WUFBYUMsV0FBVztRQUFLO1FBQzVFO1lBQUVILE1BQU07WUFBa0JDLE1BQU07WUFBWUMsTUFBTTtZQUFZQyxXQUFXO1FBQUs7UUFDOUU7WUFBRUgsTUFBTTtZQUFlQyxNQUFNO1lBQVVDLE1BQU07WUFBd0JDLFdBQVc7UUFBSztRQUNyRjtZQUFFSCxNQUFNO1lBQVdDLE1BQU07WUFBWUMsTUFBTTtZQUFXQyxXQUFXO1FBQUs7UUFDdEU7WUFBRUgsTUFBTTtZQUFlQyxNQUFNO1lBQVNDLE1BQU07WUFBU0MsV0FBVztRQUFLO0tBQ3RFO0lBRUQscUJBQ0UsOERBQUNoQiw4REFBWUE7a0JBQ1gsNEVBQUNKLCtEQUFZQSxDQUFDcUIsUUFBUTtZQUFDUixPQUFPO2dCQUFFTjtnQkFBYUMsZ0JBQWdCSTtZQUFtQjs7OEJBQzlFLDhEQUFDWCw2REFBU0E7Ozs7OzhCQUNWLDhEQUFDcUI7b0JBQUtDLFdBQVU7OEJBQ2JqQjs7Ozs7OzhCQUVILDhEQUFDSixzREFBTUE7b0JBQUNzQixPQUFPUjtvQkFBVVQsYUFBYUE7Ozs7OztnQkFDckNBLDZCQUFlLDhEQUFDSixrRUFBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJdkM7R0E5Q3dCRTtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL2NsaWVudC1sYXlvdXQudHN4PzYyZTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFkbWluQ29udGV4dCB9IGZyb20gJ0Bjb21wb25lbnRzL0FwcEhlYWRlcic7XG5pbXBvcnQgQXBwSGVhZGVyIGZyb20gJ0Bjb21wb25lbnRzL0FwcEhlYWRlcic7XG5pbXBvcnQgeyBOYXZCYXIgfSBmcm9tICdAY29tcG9uZW50cy9OYXZCYXInO1xuaW1wb3J0IEZlZWRiYWNrQnV0dG9uIGZyb20gJ0Bjb21wb25lbnRzL0ZlZWRiYWNrQnV0dG9uJztcbmltcG9ydCB7IENoYXRQcm92aWRlciB9IGZyb20gJy4uL2NvbnRleHQvQ2hhdENvbnRleHQnO1xuXG4vLyBEZWZpbmUgTmF2SXRlbSBpbnRlcmZhY2VcbmludGVyZmFjZSBOYXZJdGVtIHtcbiAgbmFtZTogc3RyaW5nO1xuICBwYXRoOiBzdHJpbmc7XG4gIGljb246IHN0cmluZztcbiAgYWRtaW5Pbmx5PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2xpZW50TGF5b3V0KHtcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59KSB7XG4gIGNvbnN0IFtpc0FkbWluTW9kZSwgc2V0SXNBZG1pbk1vZGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIC8vIEVmZmVjdCB0byBsb2FkIGFkbWluIG1vZGUgZnJvbSBsb2NhbFN0b3JhZ2Ugb24gbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBPbiBtb3VudCwgY2hlY2sgbG9jYWwgc3RvcmFnZVxuICAgIGNvbnN0IHN0b3JlZE1vZGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWRtaW5Nb2RlJyk7XG4gICAgaWYgKHN0b3JlZE1vZGUpIHtcbiAgICAgIHNldElzQWRtaW5Nb2RlKHN0b3JlZE1vZGUgPT09ICd0cnVlJyk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgLy8gSGFuZGxlciBmdW5jdGlvbiB0byB1cGRhdGUgYm90aCBzdGF0ZSBhbmQgbG9jYWxTdG9yYWdlXG4gIGNvbnN0IGhhbmRsZVNldEFkbWluTW9kZSA9ICh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgIHNldElzQWRtaW5Nb2RlKHZhbHVlKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYWRtaW5Nb2RlJywgU3RyaW5nKHZhbHVlKSk7XG4gIH07XG5cbiAgLy8gTmF2aWdhdGlvbiBpdGVtc1xuICBjb25zdCBuYXZJdGVtczogTmF2SXRlbVtdID0gW1xuICAgIHsgbmFtZTogJ0FJIENvbXBhbmlvbicsIHBhdGg6ICcvYWktY29tcGFuaW9uJywgaWNvbjogJ2NoYXQtYnViYmxlJyB9LFxuICAgIHsgbmFtZTogJ1F1ZXN0cycsIHBhdGg6ICcvcXVlc3RzJywgaWNvbjogJ2Vtb2ppLWV2ZW50cycgfSxcbiAgICB7IG5hbWU6ICdQcm9maWxlJywgcGF0aDogJy9wcm9maWxlJywgaWNvbjogJ3BlcnNvbicgfSxcbiAgICB7IG5hbWU6ICdEYXNoYm9hcmQnLCBwYXRoOiAnL2Rhc2hib2FyZCcsIGljb246ICdkYXNoYm9hcmQnLCBhZG1pbk9ubHk6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdTeXN0ZW0gUHJvbXB0cycsIHBhdGg6ICcvcHJvbXB0cycsIGljb246ICdzZXR0aW5ncycsIGFkbWluT25seTogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ0FkbWluIFRvb2xzJywgcGF0aDogJy9hZG1pbicsIGljb246ICdhZG1pbi1wYW5lbC1zZXR0aW5ncycsIGFkbWluT25seTogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ1Rlc3RpbmcnLCBwYXRoOiAnL3Rlc3RpbmcnLCBpY29uOiAnc2NpZW5jZScsIGFkbWluT25seTogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ0V2YWx1YXRpb25zJywgcGF0aDogJy9ldmFsJywgaWNvbjogJ3Njb3JlJywgYWRtaW5Pbmx5OiB0cnVlIH0sXG4gIF07XG5cbiAgcmV0dXJuIChcbiAgICA8Q2hhdFByb3ZpZGVyPlxuICAgICAgPEFkbWluQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBpc0FkbWluTW9kZSwgc2V0SXNBZG1pbk1vZGU6IGhhbmRsZVNldEFkbWluTW9kZSB9fT5cbiAgICAgICAgPEFwcEhlYWRlciAvPlxuICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJtYWluLWNvbnRlbnRcIj5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvbWFpbj5cbiAgICAgICAgPE5hdkJhciBpdGVtcz17bmF2SXRlbXN9IGlzQWRtaW5Nb2RlPXtpc0FkbWluTW9kZX0gLz5cbiAgICAgICAge2lzQWRtaW5Nb2RlICYmIDxGZWVkYmFja0J1dHRvbiAvPn1cbiAgICAgIDwvQWRtaW5Db250ZXh0LlByb3ZpZGVyPlxuICAgIDwvQ2hhdFByb3ZpZGVyPlxuICApO1xufSJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiQWRtaW5Db250ZXh0IiwiQXBwSGVhZGVyIiwiTmF2QmFyIiwiRmVlZGJhY2tCdXR0b24iLCJDaGF0UHJvdmlkZXIiLCJDbGllbnRMYXlvdXQiLCJjaGlsZHJlbiIsImlzQWRtaW5Nb2RlIiwic2V0SXNBZG1pbk1vZGUiLCJzdG9yZWRNb2RlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImhhbmRsZVNldEFkbWluTW9kZSIsInZhbHVlIiwic2V0SXRlbSIsIlN0cmluZyIsIm5hdkl0ZW1zIiwibmFtZSIsInBhdGgiLCJpY29uIiwiYWRtaW5Pbmx5IiwiUHJvdmlkZXIiLCJtYWluIiwiY2xhc3NOYW1lIiwiaXRlbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/client-layout.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/ChatContext.tsx":
/*!*************************************!*\
  !*** ./src/context/ChatContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatProvider: function() { return /* binding */ ChatProvider; },\n/* harmony export */   useChatContext: function() { return /* binding */ useChatContext; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _hooks_useApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useApi */ \"(app-pages-browser)/./src/hooks/useApi.ts\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n // Import the hook\n// Create the context with default values\nconst ChatContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    messages: [],\n    loading: false,\n    error: null,\n    debugInfo: null,\n    conversationId: null,\n    currentModel: null,\n    conversationCost: 0,\n    sendMessage: async ()=>{},\n    clearMessages: ()=>{},\n    startNewConversation: ()=>{}\n});\n// ChatProvider component to wrap the app with chat functionality\n// Helper function to calculate cost based on model and token count\nconst calculateCost = (modelName, inputTokens, outputTokens)=>{\n    // Convert tokens to millions for calculation\n    const inputMillions = inputTokens / 1000000;\n    const outputMillions = outputTokens / 1000000;\n    // Set rates based on model\n    if (modelName.toLowerCase().includes(\"claude\")) {\n        // Claude 3.5 Sonnet pricing\n        const inputRate = 3; // $3 per million tokens\n        const outputRate = 15; // $15 per million tokens\n        return inputMillions * inputRate + outputMillions * outputRate;\n    } else if (modelName.toLowerCase().includes(\"gpt\")) {\n        // GPT-4 pricing\n        const inputRate = 2.5; // $2.50 per million tokens\n        const outputRate = 10; // $10 per million tokens\n        return inputMillions * inputRate + outputMillions * outputRate;\n    }\n    // Default pricing for unknown models\n    return 0;\n};\n// Estimate token count for English text\nconst estimateTokenCount = (text)=>{\n    // Simple estimate: ~3/4 token per word for English\n    const wordCount = text.split(/\\s+/).length;\n    return Math.ceil(wordCount * 1.33);\n};\nconst ChatProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [debugInfo, setDebugInfo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // State for debug info\n    const [conversationId, setConversationId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // Track current conversation ID\n    const [currentModel, setCurrentModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // Track current model\n    const [conversationCost, setConversationCost] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0); // Track conversation cost\n    // API instance\n    const api = (0,_hooks_useApi__WEBPACK_IMPORTED_MODULE_2__.useApi)(); // Use the hook\n    // Send a message to the AI and get a response\n    const sendMessage = async function(content, overridePromptId) {\n        let requestDebugInfo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, useContext = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true // <-- Receive context toggle option (default to true)\n        ;\n        // Don't send if already loading\n        if (loading) {\n            console.log(\"[ChatContext] Skipping message send - already loading\");\n            return;\n        }\n        console.log(\"[ChatContext] Preparing to send message:\\n    - Content length: \".concat(content.length, \" chars\\n    - Override Prompt ID: \").concat(overridePromptId || \"None\", \"\\n    - Request Debug Info: \").concat(requestDebugInfo, \"\\n    - Use Context: \").concat(useContext, \"\\n    - Current Conversation ID: \").concat(conversationId || \"New conversation\"));\n        try {\n            var _response_debugInfo, _response_debugInfo1;\n            setLoading(true);\n            setError(null);\n            setDebugInfo(null); // Clear previous debug info\n            // Generate unique ID for user message with added randomness\n            const userMessageId = \"user-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).slice(2));\n            console.log(\"[ChatContext] Generated user message ID: \".concat(userMessageId));\n            // Estimate token count for user message\n            const estimatedUserTokens = estimateTokenCount(content);\n            // Create user message object with token count\n            const userMessage = {\n                id: userMessageId,\n                content,\n                role: \"user\",\n                createdAt: new Date().toISOString(),\n                tokenCount: {\n                    input: estimatedUserTokens\n                },\n                modelName: currentModel || undefined\n            };\n            // Add user message to the messages array immediately\n            console.log(\"[ChatContext] Adding user message to UI\");\n            setMessages((prevMessages)=>{\n                const newMessages = [\n                    ...prevMessages,\n                    userMessage\n                ];\n                console.log(\"[ChatContext] After adding user message - array size: \".concat(newMessages.length));\n                return newMessages;\n            });\n            // Make the API call to get a response, passing debug options and conversationId\n            console.log(\"[ChatContext] Calling API to send message\");\n            console.log('[ChatContext] User message content: \"'.concat(content, '\"'));\n            // Set requestDebugInfo to true to get system prompt and model info\n            const enhancedDebugInfo = true;\n            const response = await api.chat.sendMessage(content, overridePromptId, enhancedDebugInfo, useContext, conversationId // <-- Pass the current conversation ID (null for new)\n            );\n            console.log(\"[ChatContext] Response received:\\n      - Response length: \".concat(response.reply.length, \" chars\\n      - Conversation ID: \").concat(response.conversationId, \"\\n      - Is New Conversation: \").concat(response.isNewConversation, \"\\n      - Debug info included: \").concat(Boolean(response.debugInfo)));\n            // Log AI response content for debugging\n            console.log('[ChatContext] AI response: \"'.concat(response.reply.substring(0, 100)).concat(response.reply.length > 100 ? \"...\" : \"\", '\"'));\n            // Log system prompt and model information if available\n            if (response.debugInfo) {\n                var _response_debugInfo_conversation;\n                console.log('[ChatContext] System prompt: \"'.concat(response.debugInfo.systemPromptUsedName, '\"'));\n                console.log('[ChatContext] Model used: \"'.concat(response.debugInfo.modelName || \"Default model\", '\"'));\n                console.log(\"[ChatContext] Conversation history: \".concat(((_response_debugInfo_conversation = response.debugInfo.conversation) === null || _response_debugInfo_conversation === void 0 ? void 0 : _response_debugInfo_conversation.messageCount) || 0, \" previous messages\"));\n                // Log if context was injected\n                if (response.debugInfo.summaryContextInjected) {\n                    console.log(\"[ChatContext] Context injected: Yes (\".concat(response.debugInfo.summaryContextInjected.length, \" chars)\"));\n                } else {\n                    console.log(\"[ChatContext] Context injected: No\");\n                }\n            }\n            // Always update conversationId from response to ensure consistency\n            console.log(\"[ChatContext] \".concat(!conversationId ? \"Setting\" : \"Updating\", \" conversation ID to: \").concat(response.conversationId));\n            setConversationId(response.conversationId);\n            // Log if this is a new conversation for debugging\n            if (response.isNewConversation) {\n                console.log(\"[ChatContext] Server indicated this is a new conversation\");\n            }\n            // Update current model if available in debug info\n            if ((_response_debugInfo = response.debugInfo) === null || _response_debugInfo === void 0 ? void 0 : _response_debugInfo.modelName) {\n                console.log(\"[ChatContext] Setting current model to: \".concat(response.debugInfo.modelName));\n                setCurrentModel(response.debugInfo.modelName);\n            }\n            // Estimate token count for AI response\n            const estimatedOutputTokens = estimateTokenCount(response.reply);\n            // Create AI message object with token count\n            const aiMessage = {\n                id: \"assistant-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).slice(2)),\n                content: response.reply,\n                role: \"assistant\",\n                createdAt: new Date().toISOString(),\n                tokenCount: {\n                    output: estimatedOutputTokens\n                },\n                modelName: ((_response_debugInfo1 = response.debugInfo) === null || _response_debugInfo1 === void 0 ? void 0 : _response_debugInfo1.modelName) || currentModel || undefined\n            };\n            // Safely update conversation cost using a try-catch to handle any errors\n            try {\n                var _response_debugInfo2, _response_debugInfo3;\n                // Update conversation cost if we have debug info with cost estimate\n                if ((_response_debugInfo2 = response.debugInfo) === null || _response_debugInfo2 === void 0 ? void 0 : _response_debugInfo2.costEstimate) {\n                    var _response_debugInfo4;\n                    const messageCost = response.debugInfo.costEstimate;\n                    console.log(\"[ChatContext] Server message cost estimate: $\".concat(messageCost.toFixed(6)));\n                    if ((_response_debugInfo4 = response.debugInfo) === null || _response_debugInfo4 === void 0 ? void 0 : _response_debugInfo4.tokenUsage) {\n                        console.log(\"[ChatContext] Token usage: \".concat(response.debugInfo.tokenUsage.promptTokens, \" prompt tokens, \").concat(response.debugInfo.tokenUsage.completionTokens, \" completion tokens\"));\n                    }\n                    // Update total conversation cost\n                    setConversationCost((prevCost)=>{\n                        const newCost = prevCost + messageCost;\n                        console.log(\"[ChatContext] Updated conversation cost: $\".concat(newCost.toFixed(6)));\n                        return newCost;\n                    });\n                } else if (((_response_debugInfo3 = response.debugInfo) === null || _response_debugInfo3 === void 0 ? void 0 : _response_debugInfo3.modelName) || currentModel) {\n                    var _response_debugInfo5;\n                    const modelToUse = ((_response_debugInfo5 = response.debugInfo) === null || _response_debugInfo5 === void 0 ? void 0 : _response_debugInfo5.modelName) || currentModel || \"\";\n                    const inputTokens = estimatedUserTokens;\n                    const outputTokens = estimatedOutputTokens;\n                    // Calculate message cost\n                    const messageCost = calculateCost(modelToUse, inputTokens, outputTokens);\n                    console.log(\"[ChatContext] Client message cost estimate: $\".concat(messageCost.toFixed(6), \" (\").concat(inputTokens, \" input tokens, \").concat(outputTokens, \" output tokens)\"));\n                    // Update total conversation cost\n                    setConversationCost((prevCost)=>{\n                        const newCost = prevCost + messageCost;\n                        console.log(\"[ChatContext] Updated conversation cost: $\".concat(newCost.toFixed(6)));\n                        return newCost;\n                    });\n                } else {\n                    // If we can't estimate cost, just log a message\n                    console.log(\"[ChatContext] Unable to estimate message cost - insufficient data\");\n                }\n            } catch (costError) {\n                // If anything goes wrong in cost calculation, just log and continue\n                console.error(\"[ChatContext] Error calculating message cost:\", costError);\n            }\n            // Add AI message to the messages array\n            console.log(\"[ChatContext] Adding AI response to UI\");\n            setMessages((prevMessages)=>{\n                const newMessages = [\n                    ...prevMessages,\n                    aiMessage\n                ];\n                console.log(\"[ChatContext] Updated messages array size: \".concat(newMessages.length));\n                console.log(\"[ChatContext] Latest message ID: \".concat(aiMessage.id));\n                return newMessages;\n            });\n            // Set debug info if requested and received\n            if (requestDebugInfo && response.debugInfo) {\n                console.log(\"[ChatContext] Setting debug info in state\");\n                setDebugInfo(response.debugInfo);\n            }\n        } catch (err) {\n            var _err_response_data, _err_response;\n            console.error(\"[ChatContext] Error sending message:\", err);\n            const errorMessage = ((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || err.message || \"Failed to get a response from the AI. Please try again.\";\n            console.error(\"[ChatContext] Setting error: \".concat(errorMessage));\n            setError(errorMessage);\n        // Optionally remove the user message if the API call failed\n        // setMessages(prevMessages => prevMessages.filter(msg => msg.id !== userMessageId));\n        } finally{\n            console.log(\"[ChatContext] Message exchange complete, setting loading to false\");\n            setLoading(false);\n        }\n    };\n    // Clear all messages\n    const clearMessages = ()=>{\n        setMessages([]);\n        setError(null);\n        setDebugInfo(null); // Clear debug info as well\n    };\n    // Start a new conversation\n    const startNewConversation = ()=>{\n        console.log(\"[ChatContext] Starting new conversation - resetting state\");\n        console.log(\"[ChatContext] Previous conversation ID: \".concat(conversationId || \"None\"));\n        setConversationId(null); // This will signal the backend to start a fresh conversation\n        setMessages([]); // Clear the UI\n        setError(null);\n        setDebugInfo(null);\n        setConversationCost(0); // Reset conversation cost\n        // Keep the current model info for the next conversation\n        console.log(\"[ChatContext] State reset complete for new conversation\");\n    };\n    // Context value\n    const value = {\n        messages,\n        loading,\n        debugInfo,\n        error,\n        conversationId,\n        currentModel,\n        conversationCost,\n        sendMessage,\n        clearMessages,\n        startNewConversation\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChatContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/connorholly/Downloads/purpose/gemini-plan-proto/frontend/src/context/ChatContext.tsx\",\n        lineNumber: 354,\n        columnNumber: 10\n    }, undefined);\n};\n_s(ChatProvider, \"qpAj09b2F97ctlymJtOm/HwzSKU=\", false, function() {\n    return [\n        _hooks_useApi__WEBPACK_IMPORTED_MODULE_2__.useApi\n    ];\n});\n_c = ChatProvider;\n// Custom hook to use the chat context\nconst useChatContext = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChatContext);\n};\n_s1(useChatContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (ChatContext);\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/ChatContext.tsx\n"));

/***/ })

});
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ragOperations RAGOperation[]
  knowledgeItems UserKnowledgeItem[]
  promptFeedback PromptFeedback[]
  generalFeedback GeneralFeedback[]
  performanceMetrics PerformanceMetrics[]
}

model Conversation {
  id            String         @id @default(uuid())
  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  systemPromptId String?
  systemPrompt   SystemPrompt? @relation(fields: [systemPromptId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      Message[]
  ragOperations RAGOperation[]
  performanceMetrics PerformanceMetrics[]
  summaries     ConversationSummary[]
  lastSummarizedAt DateTime?    // Track when the conversation was last summarized
}

model Message {
  id             String           @id @default(uuid())
  conversationId String
  role           String // "user" | "assistant" | "function_call" etc.
  content        String           @db.Text
  createdAt      DateTime         @default(now())
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  feedback       MessageFeedback?
  ragOperations  RAGOperation[]
}

model MessageFeedback {
  id        String   @id @default(uuid())
  messageId String   @unique
  message   Message  @relation(fields: [messageId], references: [id])
  type      String   // "LIKE" | "DISLIKE"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New models for RAG tracking
model RAGOperation {
  id             String           @id @default(uuid())
  messageId      String?
  message        Message?         @relation(fields: [messageId], references: [id])
  query          String           @db.Text
  conversationId String?
  conversation   Conversation?    @relation(fields: [conversationId], references: [id])
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  timestamp      DateTime         @default(now())
  source         String           // "chat" | "realtime_voice"
  retrievedDocs  RetrievedDocument[]
  operationTime  Int              // Time in milliseconds
  embeddingId    String?
  embedding      Embedding?       @relation(fields: [embeddingId], references: [id])
}

model RetrievedDocument {
  id              String        @id @default(uuid())
  ragOperationId  String
  ragOperation    RAGOperation  @relation(fields: [ragOperationId], references: [id])
  documentId      String        // ID of the document in Pinecone
  similarityScore Float         // Score from Pinecone
  content         String        @db.Text
  source          String?       // Source of the document if available
  metadata        Json?         // Any additional metadata
  timestamp       DateTime      @default(now())
}

model Embedding {
  id             String          @id @default(uuid())
  text           String          @db.Text
  vectorId       String          // ID of the vector in Pinecone
  source         String          // "user_query" | "conversation_history" | "document"
  timestamp      DateTime        @default(now())
  ragOperations  RAGOperation[]
}

// New model for user-specific knowledge base
model UserKnowledgeItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String?
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// System Prompt Testing Framework
model SystemPrompt {
  id          String           @id @default(uuid())
  name        String
  content     String           @db.Text
  status      String           // "active", "test", "deprecated"
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  feedback    PromptFeedback[]
  conversations Conversation[] // Track which conversations use this prompt
}

model PromptFeedback {
  id             String        @id @default(uuid())
  systemPromptId String
  systemPrompt   SystemPrompt  @relation(fields: [systemPromptId], references: [id])
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  rating         Int           // 1-5 rating
  comments       String?       @db.Text
  createdAt      DateTime      @default(now())
}

// GeneralFeedback model for capturing user feedback
model GeneralFeedback {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  category    String   // e.g. "UI/UX", "Voice", "AI Response", etc.
  content     String   @db.Text // text from user
  screenshot  String?  // optional link to screenshot
  createdAt   DateTime @default(now())
}

// Performance Monitoring model
model PerformanceMetrics {
  id            String   @id @default(uuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  conversationId String?
  conversation  Conversation? @relation(fields: [conversationId], references: [id])
  feature       String   // e.g. "embedding", "completion", "tts"
  responseTime  Int      // Time in milliseconds
  tokensUsed    Int?
  cost          Float?
  timestamp     DateTime @default(now())
}

// Model for conversation summaries with hierarchical memory
model ConversationSummary {
  id              String        @id @default(uuid())
  conversationId  String
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  content         String        @db.Text
  type            String        // "short_term", "medium_term", "long_term"
  startMessageId  String?       // First message included in this summary
  endMessageId    String?       // Last message included in this summary
  embeddings      Json?         // Store vector embedding for retrieval 
  createdAt       DateTime      @default(now())
  priority        Int           @default(1) // Importance score (1-10)
  lastAccessed    DateTime      @default(now()) // Track when this was last used
}
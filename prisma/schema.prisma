// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ragOperations RAGOperation[]
}

model Conversation {
  id            String         @id @default(uuid())
  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      Message[]
  ragOperations RAGOperation[]
}

model Message {
  id             String           @id @default(uuid())
  conversationId String
  role           String // "user" | "assistant" | "function_call" etc.
  content        String           @db.Text
  createdAt      DateTime         @default(now())
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  feedback       MessageFeedback?
  ragOperations  RAGOperation[]
}

model MessageFeedback {
  id        String   @id @default(uuid())
  messageId String   @unique
  message   Message  @relation(fields: [messageId], references: [id])
  type      String   // "LIKE" | "DISLIKE"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New models for RAG tracking
model RAGOperation {
  id             String           @id @default(uuid())
  messageId      String?
  message        Message?         @relation(fields: [messageId], references: [id])
  query          String           @db.Text
  conversationId String?
  conversation   Conversation?    @relation(fields: [conversationId], references: [id])
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  timestamp      DateTime         @default(now())
  source         String           // "chat" | "realtime_voice"
  retrievedDocs  RetrievedDocument[]
  operationTime  Int              // Time in milliseconds
  embeddingId    String?
  embedding      Embedding?       @relation(fields: [embeddingId], references: [id])
}

model RetrievedDocument {
  id              String        @id @default(uuid())
  ragOperationId  String
  ragOperation    RAGOperation  @relation(fields: [ragOperationId], references: [id])
  documentId      String        // ID of the document in Pinecone
  similarityScore Float         // Score from Pinecone
  content         String        @db.Text
  source          String?       // Source of the document if available
  metadata        Json?         // Any additional metadata
  timestamp       DateTime      @default(now())
}

model Embedding {
  id             String          @id @default(uuid())
  text           String          @db.Text
  vectorId       String          // ID of the vector in Pinecone
  source         String          // "user_query" | "conversation_history" | "document"
  timestamp      DateTime        @default(now())
  ragOperations  RAGOperation[]
}

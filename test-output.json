
> purpose-proto-nobackend@0.1.0 test
> jest --json

{"numFailedTestSuites":14,"numFailedTests":8,"numPassedTestSuites":3,"numPassedTests":22,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":10,"numTodoTests":0,"numTotalTestSuites":17,"numTotalTests":30,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1742421621880,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["User Journey End-to-End Tests","Chat with text input and RAG"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"User Journey End-to-End Tests Chat with text input and RAG should process a full user text interaction with RAG","invocations":1,"location":null,"numPassingAsserts":14,"retryReasons":[],"status":"passed","title":"should process a full user text interaction with RAG"},{"ancestorTitles":["User Journey End-to-End Tests","Chat with voice input"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"User Journey End-to-End Tests Chat with voice input should process voice input, transcribe, and generate voice response","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should process voice input, transcribe, and generate voice response"}],"endTime":1742421625079,"message":"","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/user-journey.test.ts","startTime":1742421622031,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    ReferenceError: Cannot access 'mockTransaction' before initialization\n\n      42 | jest.mock('@/lib/services/prisma', () => ({\n      43 |   getPrismaClient: jest.fn().mockReturnValue({\n    > 44 |     $transaction: mockTransaction\n         |                   ^\n      45 |   })\n      46 | }));\n      47 |\n\n      at __tests__/integration/prompt-service.test.ts:44:19\n      at Object.<anonymous> (src/lib/services/promptService.ts:1:1)\n      at Object.<anonymous> (__tests__/integration/prompt-service.test.ts:1:1)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/prompt-service.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Error Handling Tests","OpenAI API Errors"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests OpenAI API Errors should handle rate limit errors from OpenAI","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle rate limit errors from OpenAI"},{"ancestorTitles":["Error Handling Tests","OpenAI API Errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests OpenAI API Errors should handle timeout errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle timeout errors"},{"ancestorTitles":["Error Handling Tests","Pinecone API Errors"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests Pinecone API Errors should handle service unavailability","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle service unavailability"},{"ancestorTitles":["Error Handling Tests","Database Errors"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests Database Errors should handle database connection errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database connection errors"},{"ancestorTitles":["Error Handling Tests","API Endpoint Error Handling"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests API Endpoint Error Handling should return appropriate error response for RAG API failures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return appropriate error response for RAG API failures"},{"ancestorTitles":["Error Handling Tests","API Endpoint Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests API Endpoint Error Handling should handle malformed requests gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle malformed requests gracefully"},{"ancestorTitles":["Error Handling Tests","Recovery Strategies"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Error Handling Tests Recovery Strategies should fall back to default values when services fail","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should fall back to default values when services fail"}],"endTime":1742421626120,"message":"","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/error-handling.test.ts","startTime":1742421622039,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Information Extraction Tests","extractUserInformation function"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Information Extraction Tests extractUserInformation function should extract information from user messages","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should extract information from user messages"},{"ancestorTitles":["Information Extraction Tests","extractUserInformation function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Information Extraction Tests extractUserInformation function should handle messages with no extractable information","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle messages with no extractable information"},{"ancestorTitles":["Information Extraction Tests","extractUserInformation function"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\nExpected number of calls: 1\nReceived number of calls: 2","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\nExpected number of calls: 1\nReceived number of calls: 2\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/info-extraction.test.ts:145:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Information Extraction Tests extractUserInformation function should compare with existing knowledge and only add new information","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should compare with existing knowledge and only add new information"},{"ancestorTitles":["Information Extraction Tests","extractUserInformation function"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Information Extraction Tests extractUserInformation function should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"}],"endTime":1742421626194,"message":"  ● Information Extraction Tests › extractUserInformation function › should compare with existing knowledge and only add new information\n\n    expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\n    Expected number of calls: 1\n    Received number of calls: 2\n\n      143 |       \n      144 |       // Verify only one new fact was added (the occupation), not the name\n    > 145 |       expect(createUserKnowledgeItem).toHaveBeenCalledTimes(1);\n          |                                       ^\n      146 |       expect(createUserKnowledgeItem).toHaveBeenCalledWith(\n      147 |         'user-123', \n      148 |         expect.stringContaining('occupation: Developer')\n\n      at Object.<anonymous> (__tests__/integration/info-extraction.test.ts:145:39)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/info-extraction.test.ts","startTime":1742421622031,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    ReferenceError: Cannot access 'mockTransaction' before initialization\n\n      27 | jest.mock('@/lib/services/prisma', () => ({\n      28 |   getPrismaClient: jest.fn().mockReturnValue({\n    > 29 |     $transaction: mockTransaction\n         |                   ^\n      30 |   })\n      31 | }));\n      32 |\n\n      at __tests__/integration/knowledge-service.test.ts:29:19\n      at Object.<anonymous> (src/lib/services/knowledgeService.ts:1:1)\n      at Object.<anonymous> (__tests__/integration/knowledge-service.test.ts:1:1)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/knowledge-service.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Message Feedback API"],"duration":65,"failureDetails":[{"matcherResult":{"actual":"Valid feedback (LIKE or DISLIKE) is required","expected":"Feedback must be either \"like\" or \"dislike\"","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Feedback must be either \\\"like\\\" or \\\"dislike\\\"\"\nReceived: \"Valid feedback (LIKE or DISLIKE) is required\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Feedback must be either \\\"like\\\" or \\\"dislike\\\"\"\nReceived: \"Valid feedback (LIKE or DISLIKE) is required\"\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/messageFeedback.test.ts:56:32)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Message Feedback API returns 400 if feedback is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns 400 if feedback is invalid"},{"ancestorTitles":["Message Feedback API"],"duration":4,"failureDetails":[{"matcherResult":{"actual":400,"expected":404,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 400","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 400\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/messageFeedback.test.ts:71:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Message Feedback API returns 404 if message is not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 404 if message is not found"},{"ancestorTitles":["Message Feedback API"],"duration":2,"failureDetails":[{"matcherResult":{"actual":400,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 400","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 400\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/messageFeedback.test.ts:96:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Message Feedback API creates new feedback if none exists","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"creates new feedback if none exists"},{"ancestorTitles":["Message Feedback API"],"duration":4,"failureDetails":[{"matcherResult":{"actual":400,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 400","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 400\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/messageFeedback.test.ts:140:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Message Feedback API updates existing feedback if one exists","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"updates existing feedback if one exists"},{"ancestorTitles":["Message Feedback API"],"duration":2,"failureDetails":[{"matcherResult":{"actual":400,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 400","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 400\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/messageFeedback.test.ts:182:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Message Feedback API handles errors appropriately","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"handles errors appropriately"}],"endTime":1742421626207,"message":"  ● Message Feedback API › returns 400 if feedback is invalid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Feedback must be either \\\"like\\\" or \\\"dislike\\\"\"\n    Received: \"Valid feedback (LIKE or DISLIKE) is required\"\n\n      54 |     expect(response.status).toBe(400);\n      55 |     const responseBody = await response.json();\n    > 56 |     expect(responseBody.error).toBe('Feedback must be either \"like\" or \"dislike\"');\n         |                                ^\n      57 |   });\n      58 |\n      59 |   it('returns 404 if message is not found', async () => {\n\n      at Object.<anonymous> (__tests__/unit/messageFeedback.test.ts:56:32)\n\n  ● Message Feedback API › returns 404 if message is not found\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 400\n\n      69 |     \n      70 |     // Assert\n    > 71 |     expect(response.status).toBe(404);\n         |                             ^\n      72 |     const responseBody = await response.json();\n      73 |     expect(responseBody.error).toBe('Message not found');\n      74 |   });\n\n      at Object.<anonymous> (__tests__/unit/messageFeedback.test.ts:71:29)\n\n  ● Message Feedback API › creates new feedback if none exists\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 400\n\n      94 |     \n      95 |     // Assert\n    > 96 |     expect(response.status).toBe(200);\n         |                             ^\n      97 |     const responseBody = await response.json();\n      98 |     expect(responseBody.success).toBe(true);\n      99 |     expect(responseBody.feedback).toEqual({\n\n      at Object.<anonymous> (__tests__/unit/messageFeedback.test.ts:96:29)\n\n  ● Message Feedback API › updates existing feedback if one exists\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 400\n\n      138 |     \n      139 |     // Assert\n    > 140 |     expect(response.status).toBe(200);\n          |                             ^\n      141 |     const responseBody = await response.json();\n      142 |     expect(responseBody.success).toBe(true);\n      143 |     expect(responseBody.feedback).toEqual({\n\n      at Object.<anonymous> (__tests__/unit/messageFeedback.test.ts:140:29)\n\n  ● Message Feedback API › handles errors appropriately\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 400\n\n      180 |     \n      181 |     // Assert\n    > 182 |     expect(response.status).toBe(500);\n          |                             ^\n      183 |     const responseBody = await response.json();\n      184 |     expect(responseBody.error).toBe('Failed to process feedback');\n      185 |     \n\n      at Object.<anonymous> (__tests__/unit/messageFeedback.test.ts:182:29)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/messageFeedback.test.ts","startTime":1742421622048,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["API Endpoints Integration Tests","RAG API Endpoint"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests RAG API Endpoint should process a RAG request and return results","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should process a RAG request and return results"},{"ancestorTitles":["API Endpoints Integration Tests","RAG API Endpoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests RAG API Endpoint should return 400 for invalid requests","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 for invalid requests"},{"ancestorTitles":["API Endpoints Integration Tests","Transcribe API Endpoint"],"duration":2,"failureDetails":[{"matcherResult":{"actual":400,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 400","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 400\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/api-endpoints.test.ts:157:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"API Endpoints Integration Tests Transcribe API Endpoint should transcribe audio","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should transcribe audio"},{"ancestorTitles":["API Endpoints Integration Tests","TTS API Endpoint"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests TTS API Endpoint should generate speech from text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate speech from text"},{"ancestorTitles":["API Endpoints Integration Tests","TTS API Endpoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests TTS API Endpoint should return 400 for invalid requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for invalid requests"},{"ancestorTitles":["API Endpoints Integration Tests","Completion API Endpoint"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests Completion API Endpoint should generate a completion with context","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate a completion with context"},{"ancestorTitles":["API Endpoints Integration Tests","Conversation API Endpoints"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests Conversation API Endpoints should create a new conversation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a new conversation"},{"ancestorTitles":["API Endpoints Integration Tests","Conversation API Endpoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"API Endpoints Integration Tests Conversation API Endpoints should retrieve a conversation by ID","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should retrieve a conversation by ID"}],"endTime":1742421626219,"message":"  ● API Endpoints Integration Tests › Transcribe API Endpoint › should transcribe audio\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 400\n\n      155 |       \n      156 |       // Verify response status\n    > 157 |       expect(response.status).toBe(200);\n          |                               ^\n      158 |       \n      159 |       // Parse the response JSON\n      160 |       const data = await parseResponseJson(response);\n\n      at Object.<anonymous> (__tests__/integration/api-endpoints.test.ts:157:31)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/api-endpoints.test.ts","startTime":1742421622021,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    TypeError: fs_1.default.existsSync is not a function\n\n      4 | // Ensure logs directory exists\n      5 | const LOG_DIR = path.join(process.cwd(), 'logs');\n    > 6 | if (!fs.existsSync(LOG_DIR)) {\n        |         ^\n      7 |   fs.mkdirSync(LOG_DIR, { recursive: true });\n      8 | }\n      9 |\n\n      at Object.<anonymous> (src/lib/utils/logger.ts:6:9)\n      at Object.<anonymous> (src/lib/services/openai.ts:7:1)\n      at Object.<anonymous> (__tests__/unit/openai.test.ts:1:1)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/openai.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/Message.test.tsx:26\n            (0, react_2.render)(<Message_1.default message={mockUserMessage}/>);\n                                ^\n\n    SyntaxError: Unexpected token '<'\n\n      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/Message.test.tsx","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    ReferenceError: Cannot access 'mockConversationCreate' before initialization\n\n      20 |     getPrismaClient: jest.fn().mockReturnValue({\n      21 |       conversation: {\n    > 22 |         create: mockConversationCreate,\n         |                 ^\n      23 |         findUnique: mockConversationFindUnique,\n      24 |         findMany: mockConversationFindMany,\n      25 |       },\n\n      at __tests__/integration/conversation-service.test.ts:22:17\n      at Object.<anonymous> (__tests__/integration/conversation-service.test.ts:1:1)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/conversation-service.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/AudioRecorder.test.tsx:69\n            (0, react_2.render)(<AudioRecorder_1.default onTranscription={mockOnTranscription} onAIResponse={mockOnAIResponse} conversationId={mockConversationId}/>);\n                                ^\n\n    SyntaxError: Unexpected token '<'\n\n      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/AudioRecorder.test.tsx","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["RAG Service Integration Tests","queryDocuments function"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"RAG Service Integration Tests queryDocuments function should properly query Pinecone and return formatted results","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should properly query Pinecone and return formatted results"},{"ancestorTitles":["RAG Service Integration Tests","queryDocuments function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAG Service Integration Tests queryDocuments function should incorporate user knowledge items when userId is provided","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should incorporate user knowledge items when userId is provided"},{"ancestorTitles":["RAG Service Integration Tests","queryDocumentsOld function"],"duration":726,"failureDetails":[],"failureMessages":[],"fullName":"RAG Service Integration Tests queryDocumentsOld function should return context and matches with proper formatting","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return context and matches with proper formatting"}],"endTime":1742421626916,"message":"","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/rag-service.test.ts","startTime":1742421622024,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RAG System Verification"],"duration":2,"failureDetails":[{"code":"P2022","meta":{"modelName":"Conversation","column":"Conversation.systemPromptId"},"clientVersion":"6.5.0","name":"PrismaClientKnownRequestError"}],"failureMessages":["PrismaClientKnownRequestError: \nInvalid `prisma.conversation.create()` invocation in\n/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/src/lib/services/prisma.ts:55:30\n\n  52 // Conversation operations\n  53 export async function createConversation(userId?: string) {\n  54   const prisma = getPrismaClient();\n→ 55   return prisma.conversation.create(\nThe column `Conversation.systemPromptId` does not exist in the current database.\n    at Wn.handleRequestError (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/node_modules/@prisma/client/runtime/library.js:121:7534)\n    at Wn.handleAndLogRequestError (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/node_modules/@prisma/client/runtime/library.js:121:6858)\n    at Wn.request (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/node_modules/@prisma/client/runtime/library.js:121:6565)\n    at l (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/node_modules/@prisma/client/runtime/library.js:130:10067)\n    at Object.<anonymous> (/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/src/tests/rag-verification.test.js:18:24)"],"fullName":"RAG System Verification Test embedding generation, Pinecone query, and RAG logging","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"Test embedding generation, Pinecone query, and RAG logging"}],"endTime":1742421627084,"message":"  ● RAG System Verification › Test embedding generation, Pinecone query, and RAG logging\n\n    PrismaClientKnownRequestError: \n    Invalid `prisma.conversation.create()` invocation in\n    /Users/connorholly/Downloads/purpose/purpose-proto-nobackend/src/lib/services/prisma.ts:55:30\n\n      52 // Conversation operations\n      53 export async function createConversation(userId?: string) {\n      54   const prisma = getPrismaClient();\n    → 55   return prisma.conversation.create(\n    The column `Conversation.systemPromptId` does not exist in the current database.\n\n      16 | beforeAll(async () => {\n      17 |   // Create a test conversation to use for testing\n    > 18 |   const conversation = await createConversation();\n         |                        ^\n      19 |   testConversationId = conversation.id;\n      20 |   \n      21 |   console.log(`Created test conversation with ID: ${testConversationId}`);\n\n      at Wn.handleRequestError (node_modules/@prisma/client/runtime/library.js:121:7534)\n      at Wn.handleAndLogRequestError (node_modules/@prisma/client/runtime/library.js:121:6858)\n      at Wn.request (node_modules/@prisma/client/runtime/library.js:121:6565)\n      at l (node_modules/@prisma/client/runtime/library.js:130:10067)\n      at Object.<anonymous> (src/tests/rag-verification.test.js:18:24)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/src/tests/rag-verification.test.js","startTime":1742421622015,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    \u001b[96m__tests__/unit/pinecone.test.ts\u001b[0m:\u001b[93m128\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'number' is not assignable to parameter of type 'string'.\n\n    \u001b[7m128\u001b[0m       await queryDocuments(query, topK);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/unit/pinecone.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    \u001b[96m__tests__/integration/rag-analytics.test.ts\u001b[0m:\u001b[93m1\u001b[0m:\u001b[93m27\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"@/lib/services/ragAnalytics\"' has no exported member 'getRagOperationById'.\n\n    \u001b[7m1\u001b[0m import { getRagAnalytics, getRagOperationById } from '@/lib/services/ragAnalytics';\n    \u001b[7m \u001b[0m \u001b[91m                          ~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/rag-analytics.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    \u001b[96m__tests__/integration/message-feedback.test.ts\u001b[0m:\u001b[93m1\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2724: \u001b[0m'\"@/lib/services/feedbackService\"' has no exported member named 'createMessageFeedback'. Did you mean 'createFeedback'?\n\n    \u001b[7m1\u001b[0m import { createMessageFeedback, getMessageFeedback, updateMessageFeedback } from '@/lib/services/feedbackService';\n    \u001b[7m \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/lib/services/feedbackService.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m23\u001b[0m\n        \u001b[7m16\u001b[0m export async function createFeedback(\n        \u001b[7m  \u001b[0m \u001b[96m                      ~~~~~~~~~~~~~~\u001b[0m\n        'createFeedback' is declared here.\n    \u001b[96m__tests__/integration/message-feedback.test.ts\u001b[0m:\u001b[93m1\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"@/lib/services/feedbackService\"' has no exported member 'getMessageFeedback'.\n\n    \u001b[7m1\u001b[0m import { createMessageFeedback, getMessageFeedback, updateMessageFeedback } from '@/lib/services/feedbackService';\n    \u001b[7m \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/message-feedback.test.ts\u001b[0m:\u001b[93m1\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"@/lib/services/feedbackService\"' has no exported member 'updateMessageFeedback'.\n\n    \u001b[7m1\u001b[0m import { createMessageFeedback, getMessageFeedback, updateMessageFeedback } from '@/lib/services/feedbackService';\n    \u001b[7m \u001b[0m \u001b[91m                                                    ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/message-feedback.test.ts","startTime":1742421629878,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1742421629878,"message":"  ● Test suite failed to run\n\n    Jest worker encountered 4 child process exceptions, exceeding retry limit\n\n      at ChildProcessWorker.initialize (node_modules/jest-worker/build/workers/ChildProcessWorker.js:181:21)\n","name":"/Users/connorholly/Downloads/purpose/purpose-proto-nobackend/__tests__/integration/openai-service.test.ts","startTime":1742421629878,"status":"failed","summary":""}],"wasInterrupted":false}
